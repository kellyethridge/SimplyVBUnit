//
// SimplyVBUnit Type Library
//

[ helpstring("SimplyVBUnit 4.0 Type Library"), uuid(923925AC-1013-4d27-9FB1-4FF0B3B47BA2), lcid(0x00000000), version(4.0)]
library SimplyVBUnitType {
importlib("stdole2.tlb"); importlib("msvbvm60.dll");

        typedef unsigned char byte;

        typedef struct VBGUID 
        {
                int   Data1;
                short Data2;
                short Data3;
                byte  Data4[8];
        } VBGUID;

        typedef enum DateInterval {
                OfSeconds = 0,
                OfMinutes = 1,
                OfHours = 2,
                OfDays = 3,
                OfMonths = 4,
                OfYears = 5,
                OfWeeks = 6,
                OfQuarters = 7,
                OfDayOfYears = 8
        } DateInterval;

        typedef struct SafeArray1d
        {
                short   cDims;
                short   fFeatures;
                long    cbElements;
                long    cLocks;
                long    pvData;
                long    cElements;
                long    lLbound;
        } SafeArray1d;

        typedef enum ToleranceMode
        {
                NoneMode = 0,
                LinearMode = 1,
                PercentMode=2
        } ToleranceMode;

    [dllname("Constants")]
    module Constants {
    const long vbNullPtr          = 0x00000000;
    const long ENUM_FINISHED      = 0x00000001;
    const long E_NOINTERFACE      = 0x80004002;
    const long E_OUTOFMEMORY      = 0x00000007;
    const long PVDATA_OFFSET      = 0x0000000C;
    const long VT_BYREF           = 0x00004000;
    const long VARIANTDATA_OFFSET = 0x00000008;
    }


    [
        dllname("kernel32.dll"),
        helpstring("Access to API functions within the Kernel32.dll system file.")
    ]
    module Kernel32
    {
        [entry("RtlMoveMemory")]                                void CopyMemory([in] void * Destination,[in] void * Source, [in] long Length);
        [entry("RtlZeroMemory")]                                void ZeroMemory([in] void * Destination, [in] long Length);
        [entry("QueryPerformanceCounter"), usesgetlasterror]    long QueryPerformanceCounter([in] CURRENCY * lpPerformanceCount);
        [entry("QueryPerformanceFrequency"), usesgetlasterror]  long QueryPerformanceFrequency([in] CURRENCY * lpFrequency);
    }

    [
        dllname("oleaut32.dll"),
        helpstring("Access to API functions within the Oleaut32.dll system file.")
    ]
    module OleAut32
    {
        [entry("VariantCopyInd")]        HRESULT VariantCopyInd([in] VARIANT * pvarDest, [in] void * pvarSrc);
        [entry("VariantCopy")]           HRESULT VariantCopy([in] VARIANT * pvarDest, [in] void * pvarSrc);
        [entry("SafeArrayGetDim")]       long SafeArrayGetDim([in] long psa);
        [entry("SafeArrayCreateVector")] long SafeArrayCreateVector([in] VbVarType vt, [in] long lLBound, [in] long cElements);
    }

    [
        dllname("ole32.dll"),
        helpstring("Access to API functions within the Ole32.dll system file.")
    ]
    module Ole32 
    {
        [entry("CoTaskMemAlloc")] long CoTaskMemAlloc([in] long cb);
        [entry("CoTaskMemFree")]  void CoTaskMemFree([in] long pv);
        [entry("IsEqualGUID")]    long IsEqualGUID([in] void * rguid1, [in] void * rguid2);
    }
    
    [
        dllname("msvbvm60.dll"),
        helpstring("Access to VB6 runtime dll methods.")
    ]
    module VBVM60
    {
        [propget, entry("GetMem4")] HRESULT MemLong([in] long Address, [out, retval] long * RetVal);
        [propput, entry("PutMem4")] HRESULT MemLong([in] long Address, [in] long RHS);
        [propget, entry("GetMem4")] HRESULT ObjectPtr([in] void * Object, [out, retval] long * RetVal);
        [propput, entry("PutMem4")] HRESULT ObjectPtr([in] void * Object, [in] long RHS);
        [propget, entry("GetMem4")] HRESULT SAPtr([in] SAFEARRAY(VARIANT) * Array, [out, retval] long * RetVal);
        [propput, entry("PutMem4")] HRESULT SAPtr([in] SAFEARRAY(VARIANT) * Array, [in] long RHS);
        [propget, entry("GetMem2")] HRESULT VariantType([in] VARIANT * Source, [out, retval] short * RetVal);
        [propput, entry("PutMem2")] HRESULT VariantType([in] VARIANT * Source, [in] short RHS);
        [propget, entry("GetMem4")] HRESULT StringPtr([in] BSTR * Source, [out, retval] long * RetVal);
	[propput, entry("PutMem4")] HRESULT StringPtr([in] BSTR * Source, [in] long Value);
	[propget, entry("GetMem4")] HRESULT SAPtrLong([in] SAFEARRAY(long) * Array, [out, retval] long * RetVal);
	[propput, entry("PutMem4")] HRESULT SAPtrLong([in] SAFEARRAY(long) * Array, [in] long RHS);
    }

        // Forward definitions
        interface IBasicExpression;
        interface IEqualityExpression;
        interface ITolerance;
        interface IOrderedConstraint;
        interface IComparisonConstraint;
        interface ITextConstraint;
        interface IPathConstraint;
        interface ICollectionContainsConstraint;

	[uuid(00020404-0000-0000-C000-000000000046), odl]
	interface IVBEnumVARIANT : IUnknown
	{
                HRESULT VBNext([in] long celt, [in, out] VARIANT * rgvar, [in] int * pceltFetched);
                HRESULT Skip([in] int celt);
                HRESULT Reset();
                HRESULT Clone([in, out] IVBEnumVARIANT ** RetVal);
	}

	[uuid(BE21FDD8-15D9-423b-AAD9-3A094532C4D2), odl]
	interface IEqualityComparer : IDispatch
	{
		HRESULT Equals([in] VARIANT * X, [in] VARIANT * Y, [out, retval] boolean * RetVal);
	}

	[uuid(814B5074-D094-4031-B744-592F90F8BC5E), odl]
        interface IComparer : IDispatch
        {
                HRESULT Compare([in] VARIANT * X, [in] VARIANT * Y, [out, retval] long * RetVal);
        }

        [uuid(BA47B595-FA90-459e-A107-C076FA915B3B), odl]
        interface IConstraintExpression : IDispatch
        {
		HRESULT EqualTo([in] VARIANT * Expected, [out, retval] IEqualityExpression ** RetVal);
		HRESULT True([out, retval] IBasicExpression ** RetVal);
		HRESULT False([out, retval] IBasicExpression ** RetVal);
		HRESULT VBEmpty([out, retval] IBasicExpression ** RetVal);
		HRESULT VBNull([out, retval] IBasicExpression ** RetVal);
		HRESULT Nothing([out, retval] IBasicExpression ** RetVal);
		HRESULT Missing([out, retval] IBasicExpression ** RetVal);
		HRESULT Not([out, retval] IConstraintExpression ** RetVal);
		HRESULT LessThan([in] VARIANT * Expected, [out, retval] IBasicExpression ** RetVal);
		HRESULT GreaterThan([in] VARIANT * Expected, [out, retval] IBasicExpression ** RetVal);
		HRESULT LessThanOrEqualTo([in] VARIANT * Expected, [out, retval] IBasicExpression ** RetVal);
		HRESULT GreaterThanOrEqualTo([in] VARIANT * Expected, [out, retval] IBasicExpression ** RetVal);
                HRESULT InRange([in] VARIANT * FromValue, [in] VARIANT * ToValue, [out, retval] IComparisonConstraint ** RetVal);
                HRESULT Empty([out, retval] IBasicExpression ** RetVal);
                HRESULT SameAs([in] IDispatch * Expected, [out, retval] IBasicExpression ** RetVal);
                HRESULT Unique([out, retval] IEqualityExpression ** RetVal);
                HRESULT EquivalentTo([in] VARIANT * Expected, [out, retval] IEqualityExpression ** RetVal);
                HRESULT SubsetOf([in] VARIANT * Expected, [out, retval] IEqualityExpression ** RetVal);
                HRESULT Ordered([out, retval] IOrderedConstraint ** RetVal);
                HRESULT StringContaining([in] BSTR * Expected, [out, retval] ITextConstraint ** RetVal);
                HRESULT StringStarting([in] BSTR * Expected, [out, retval] ITextConstraint ** RetVal);
                HRESULT StringEnding([in] BSTR * Expected, [out, retval] ITextConstraint ** RetVal);
                HRESULT StringMatching([in] BSTR * Pattern, [out, retval] ITextConstraint ** RetVal);
                HRESULT SamePath([in] BSTR * Expected, [out, retval] IPathConstraint ** RetVal);
                HRESULT SamePathOrUnder([in] BSTR * Expected, [out, retval] IPathConstraint ** RetVal);
                HRESULT Persistable([out, retval] IBasicExpression ** RetVal);
                HRESULT All([out, retval] IConstraintExpression ** RetVal);
                HRESULT Some([out, retval] IConstraintExpression ** RetVal);
                HRESULT No([out, retval] IConstraintExpression ** RetVal);
                HRESULT None([out, retval] IConstraintExpression ** RetVal);
                HRESULT Member([in] VARIANT * Expected, [out, retval] ICollectionContainsConstraint ** RetVal);
                HRESULT LP([out, retval] IConstraintExpression ** RetVal);
                HRESULT RP([out, retval] IConstraintExpression ** RetVal);
                HRESULT Positive([out, retval] IBasicExpression ** RetVal);
                HRESULT Negative([out, retval] IBasicExpression ** RetVal);
	}

	[uuid(F4B39A96-8941-4e8b-BF79-C45431E05338), odl]
	interface IBasicExpression : IDispatch
	{
		HRESULT AndAlso([out, retval] IConstraintExpression ** RetVal);
		HRESULT OrElse([out, retval] IConstraintExpression ** RetVal);
	}

	[uuid(E2FC6882-7866-4a26-BBC5-6796640585D1), odl]
        interface ITextConstraint : IDispatch
        {
		HRESULT AndAlso([out, retval] IConstraintExpression ** RetVal);
		HRESULT OrElse([out, retval] IConstraintExpression ** RetVal);
                HRESULT IgnoreCase([out, retval] IBasicExpression ** RetVal);
        }

        [uuid(1C30E2C7-03F1-4ea6-BF7F-09A3284754BB), odl]
        interface IOrderedConstraint : IDispatch
        {
		HRESULT AndAlso([out, retval] IConstraintExpression ** RetVal);
		HRESULT OrElse([out, retval] IConstraintExpression ** RetVal);
		HRESULT Using([in] IComparer * Comparer, [out, retval] IOrderedConstraint ** RetVal);
                HRESULT IgnoreCase([out, retval] IOrderedConstraint ** RetVal);
                HRESULT Descending([out, retval] IOrderedConstraint ** RetVal);
		HRESULT DateInterval([in] DateInterval Interval, [out, retval] IBasicExpression ** RetVal);
        }

        [uuid(4724265D-5842-43c2-954F-5CC7F532F442), odl]
        interface IPathConstraint : IDispatch
        {
		HRESULT AndAlso([out, retval] IConstraintExpression ** RetVal);
		HRESULT OrElse([out, retval] IConstraintExpression ** RetVal);
                HRESULT RespectCase([out, retval] IBasicExpression ** RetVal);
        }

	[uuid(650F33C3-9EFC-4f17-96DF-2D98A3C218C9), odl]
	interface IToleranceUnits : IDispatch
	{
                HRESULT Years([out, retval] IEqualityExpression ** RetVal);
                HRESULT Quarters([out, retval] IEqualityExpression ** RetVal);
                HRESULT Months([out, retval] IEqualityExpression ** RetVal);
                HRESULT Weeks([out, retval] IEqualityExpression ** RetVal);
		HRESULT Days([out, retval] IEqualityExpression ** RetVal);
		HRESULT Hours([out, retval] IEqualityExpression ** RetVal);
		HRESULT Minutes([out, retval] IEqualityExpression ** RetVal);
		HRESULT Seconds([out, retval] IEqualityExpression ** RetVal);
		HRESULT TotalDays([out, retval] IEqualityExpression ** RetVal);
		HRESULT TotalHours([out, retval] IEqualityExpression ** RetVal);
                HRESULT TotalMinutes([out, retval] IEqualityExpression ** RetVal);
                HRESULT TotalSeconds([out, retval] IEqualityExpression ** RetVal);
                HRESULT Percent([out, retval] IEqualityExpression ** RetVal);
	}
	
	[uuid(C294ABED-E94B-46fd-83CA-CB146D9D4DB3), odl]
        interface ITolerance : IDispatch
        {
                [propget] HRESULT Amount([out, retval] VARIANT * RetVal);
                [propget] HRESULT Mode([out, retval] ToleranceMode * RetVal);
                [propget] HRESULT Interval([out, retval] BSTR * RetVal);
        }

        [uuid(7A36580F-B566-4f95-BE6D-35B52E61BA07), odl]
        interface IEqualityExpression : IDispatch
        {
		HRESULT AndAlso([out, retval] IConstraintExpression ** RetVal);
		HRESULT OrElse([out, retval] IConstraintExpression ** RetVal);
		HRESULT IgnoreCase([out, retval] IEqualityExpression ** RetVal);
		HRESULT Within([in] VARIANT Tolerance, [out, retval] IToleranceUnits ** RetVal);
		HRESULT AsCollection([out, retval] IEqualityExpression ** RetVal);
		HRESULT Using([in] IEqualityComparer * Comparer, [out, retval] IEqualityExpression ** RetVal);
		HRESULT Strict([out, retval] IEqualityExpression ** RetVal);
		HRESULT NoClip([out, retval] IEqualityExpression ** RetVal);
        }

        [uuid(50CA1561-5124-4edc-B588-E89268BC9976), odl]
        interface IComparisonConstraint : IDispatch
        {
		HRESULT AndAlso([out, retval] IConstraintExpression ** RetVal);
		HRESULT OrElse([out, retval] IConstraintExpression ** RetVal);
		HRESULT IgnoreCase([out, retval] IBasicExpression ** RetVal);
		HRESULT Using([in] IComparer * Comparer, [out, retval] IBasicExpression ** RetVal);
		HRESULT DateInterval([in] DateInterval Interval, [out, retval] IBasicExpression ** RetVal);
        }

        [uuid(8F6CB23F-4805-48f3-834B-67E11CA0E68F), odl]
        interface ICollectionContainsConstraint : IDispatch
        {
		HRESULT AndAlso([out, retval] IConstraintExpression ** RetVal);
		HRESULT OrElse([out, retval] IConstraintExpression ** RetVal);
		HRESULT IgnoreCase([out, retval] IBasicExpression ** RetVal);
		HRESULT Using([in] IComparer * Comparer, [out, retval] IBasicExpression ** RetVal);
        }

	[uuid(0331F242-579F-4210-9822-39782E51E0BF), odl]
	interface IzSyntaxHelper : IDispatch
	{
		HRESULT EqualTo([in] VARIANT * Expected, [out, retval] IEqualityExpression ** RetVal);
		HRESULT True([out, retval] IBasicExpression ** RetVal);
		HRESULT False([out, retval] IBasicExpression ** RetVal);
		HRESULT VBEmpty([out, retval] IBasicExpression ** RetVal);
		HRESULT VBNull([out, retval] IBasicExpression ** RetVal);
		HRESULT Nothing([out, retval] IBasicExpression ** RetVal);
		HRESULT Missing([out, retval] IBasicExpression ** RetVal);
		HRESULT Not([out, retval] IConstraintExpression ** RetVal);
		HRESULT LessThan([in] VARIANT * Expected, [out, retval] IComparisonConstraint ** RetVal);
		HRESULT GreaterThan([in] VARIANT * Expected, [out, retval] IComparisonConstraint ** RetVal);
		HRESULT LessThanOrEqualTo([in] VARIANT * Expected, [out, retval] IComparisonConstraint ** RetVal);
		HRESULT GreaterThanOrEqualTo([in] VARIANT * Expected, [out, retval] IComparisonConstraint ** RetVal);
                HRESULT InRange([in] VARIANT * FromValue, [in] VARIANT * ToValue, [out, retval] IComparisonConstraint ** RetVal);
                HRESULT Empty([out, retval] IBasicExpression ** RetVal);
                HRESULT SameAs([in] IDispatch * Expected, [out, retval] IBasicExpression ** RetVal);
                HRESULT Unique([out, retval] IEqualityExpression ** RetVal);
                HRESULT EquivalentTo([in] VARIANT * Expected, [out, retval] IEqualityExpression ** RetVal);
                HRESULT SubsetOf([in] VARIANT * Expected, [out, retval] IEqualityExpression ** RetVal);
                HRESULT Ordered([out, retval] IOrderedConstraint ** RetVal);
                HRESULT StringContaining([in] BSTR * Expected, [out, retval] ITextConstraint ** RetVal);
                HRESULT StringStarting([in] BSTR * Expected, [out, retval] ITextConstraint ** RetVal);
                HRESULT StringEnding([in] BSTR * Expected, [out, retval] ITextConstraint ** RetVal);
                HRESULT StringMatching([in] BSTR * Pattern, [out, retval] ITextConstraint ** RetVal);
                HRESULT SamePath([in] BSTR * Expected, [out, retval] IPathConstraint ** RetVal);
                HRESULT SamePathOrUnder([in] BSTR * Expected, [out, retval] IPathConstraint ** RetVal);
                HRESULT Persistable([out, retval] IBasicExpression ** RetVal);
                HRESULT All([out, retval] IConstraintExpression ** RetVal);
                HRESULT LP([out, retval] IConstraintExpression ** RetVal);
                HRESULT Positive([out, retval] IBasicExpression ** RetVal);
                HRESULT Negative([out, retval] IBasicExpression ** RetVal);
	}
}

